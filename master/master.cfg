import glob
import math
import os
import random
import re
import time
import traceback

from buildbot.buildslave            import BuildSlave
from buildbot.changes.filter        import ChangeFilter
from buildbot.changes.gitpoller     import GitPoller
from buildbot.config                import BuilderConfig
from buildbot.process.buildstep     import BuildStep, BuildStepFailed, CommandMixin
from buildbot.process.factory       import BuildFactory
from buildbot.process.properties    import Interpolate, Property, renderer
from buildbot.scheduler             import Try_Userpass
from buildbot.schedulers.basic      import AnyBranchScheduler
from buildbot.schedulers.forcesched import ForceScheduler
from buildbot.schedulers.timed      import Nightly
from buildbot.schedulers.triggerable import Triggerable
from buildbot.status                import html
from buildbot.status                import words
from buildbot.status.mail           import MailNotifier
from buildbot.status.web            import authz, auth
from buildbot.steps.shell           import Configure, ShellCommand, SetPropertyFromCommand
from buildbot.steps.source.git      import Git
from buildbot.steps.trigger         import Trigger
from buildbot.steps.transfer        import FileUpload, DirectoryUpload, MultipleFileUpload, makeStatusRemoteCommand
from twisted.internet               import defer, threads
from twisted.python                 import log
from buildbot.status.results        import EXCEPTION, FAILURE, SUCCESS, WARNINGS
from subprocess                     import Popen, PIPE

import config
reload(config)

import slack
reload(slack)

###
# TODO
#
# * poll for pull requests as well as branches
# * Only email @rethinkdb.org emails
# * Emails when test slave goes down
# * Kill stuck builds
# * show codebase and branch name in waterfall next to committer name

# The repositories used
# Note that rethinkdb-www is a private repo on github. Slaves that access
# this repo should have Thinker-Bot's Github auth token in ~/.netrc
repos = {
    'rethinkdb': 'git://github.com/rethinkdb/rethinkdb',
    'docs': 'git://github.com/rethinkdb/docs',
    'www': 'https://github.com/rethinkdb/rethinkdb-www'
}

# The slaves that are allowed to connect
# The special `disabled' slave can be used to explicitly
# disable a builder
slaves = [
    # The master slave, for coordinator jobs
    BuildSlave("dr-doom",    "lorem",       max_builds=10),

    # The dev server many of the chroots are on
    BuildSlave("newton",     "ipsum",       properties={'build-threads':8,   'test-threads':1}, max_builds=3),

    # The build slaves
    BuildSlave("chaotica",   "dolor",       properties={'build-threads':20,  'test-threads':5}, max_builds=1),
    BuildSlave("lavos",      "sit",         properties={'build-threads':20,  'test-threads':5}, max_builds=1),
    BuildSlave("ganondorf",  "amet",        properties={'build-threads':20,  'test-threads':5}, max_builds=1),

    # Used for performance tests
    BuildSlave("magneto",    "consectetur", properties={'build-threads':24,  'test-threads':5}, max_builds=1),

    # OS X 10.7, for building release packages
    BuildSlave("the-shadow", "incididunt",  properties={'build-threads':1,  'test-threads':1}, max_builds=1),

    # The mac pro, for faster OS X build and testing
    BuildSlave("gantz",      "ut",          properties={'build-threads':20, 'test-threads':5}, max_builds=1),
    
    # Other
    BuildSlave("lex-luthor", "tempor"),
    BuildSlave("puzzler",    "adipisicing"),
    BuildSlave("electro",    "elit"),
    BuildSlave("riddler",    "sed"),
    BuildSlave("sinister",   "do"),
    BuildSlave("arclight",   "eiusmod"),
    BuildSlave("deadshot",   "labore"),
    BuildSlave("disabled", str(random.random()))
]

# What port to listen on for slaves
protocols = {'pb': {'port': 9989}}

kb = 1024
mb = 1024 * kb
gb = 1024 * mb
minute = 60
hour = 60 * minute
day = 24 * hour
week = 7 * day

# Poll the repos for changes
change_source = [
    GitPoller(
        repos['rethinkdb'],
        workdir='gitpoller-rethinkdb',
        branches=True,
        project='rethinkdb',
        pollinterval=10 * minute
    ),
    GitPoller(
        repos['docs'],
        workdir='gitpoller-docs',
        branches=True,
        project='docs',
        pollinterval=10 * minute
    ),
    GitPoller(
        repos['www'],
        workdir='gitpoller-www',
        branches=True,
        project='www',
        pollinterval=10 * minute
    )
]

class RethinkDBTestSuite(ShellCommand):
    """Run the RethinkDB test suite"""

    description = 'testing'
    descriptionDone = 'test'
    timeout = 2 * hour
    haltOnFailure = False

    def __init__(self, tests=[], flags=[], **kwargs):
        command = ['test/run', '-j', Property('test-threads')] + tests + flags

        kwargs.setdefault('name', ' '.join(['test'] + tests))

        super(RethinkDBTestSuite, self).__init__(command=command, **kwargs)

class Make(ShellCommand):
    """Use make to build in the specified directory"""

    description = 'building'
    descriptionDone = 'make'
    haltOnFailure = True

    def __init__(self, target=None, flags=[], **kwargs):
        command = ['make', '-j', Property('build-threads')] + ([target] if target else []) + flags

        kwargs.setdefault('name', 'make %s' % (target or ''))

        super(Make, self).__init__(command=command, **kwargs)

# Copy a file to the buildbot master and link to it
#
# This wrapper around FileUpload copies the file to
# public_html/files/buildname/buildnumber/ and adds
# a link to it
class SaveFile(FileUpload):

    description = 'uploading'
    descriptionDone = 'upload'

    def __init__(self, slavesrc, path=None, link=True, **kwargs):
        filename = renderer(
            lambda props: props.render(slavesrc).addCallback(
                lambda slavesrc_str: slavesrc_str.split('/')[-1]))
        if path is None:
            path='%(prop:buildername)s/%(prop:buildnumber)s/%(kw:slavesrc)s'
        masterdest = Interpolate('public_html/files/' + path, slavesrc=slavesrc, filename=filename)
        if link:
            url = Interpolate('/files/' + path, slavesrc=slavesrc, filename=filename)
        else:
            url = None

        # descriptionSuffix must be a string, not a renderable
        # kwargs.setdefault('descriptionSuffix', filename)

        super(SaveFile, self).__init__(slavesrc=slavesrc, masterdest=masterdest, url=url, **kwargs)

# Copy multiple files to the buildbot master and link to them
#
# This wrapper around MultipleFileUpload also adds a glob argument. When true,
# the globs in the slavesrcs are expanded before the files are fetched.
class SaveFiles(MultipleFileUpload, CommandMixin):
    def __init__(self, slavesrcs, glob=False, path=None, **kwargs):
        self.__glob = glob
        if path is None:
            path = '%(prop:buildername)s/%(prop:buildnumber)s'
        self._path = path
        masterdest = Interpolate('public_html/files/' + path)
        super(SaveFiles, self).__init__(slavesrcs=slavesrcs, masterdest=masterdest, **kwargs)
        self.addFactoryArguments(glob=glob)

    # The glob method in CommandMixin seems broken. This one seems to work.
    def glob(self, glob):
        return self._runRemoteCommand(
            'glob', True, {'path': self._getWorkdir() + '/' + glob, 'logEnviron': False},
            makeResult=lambda cmd: cmd.updates['files'][0])

    # Expand the globs before calling MultipleFileUpload.start
    @defer.inlineCallbacks
    def start(self):
        if self.__glob:
            files = []
            for glob in self.slavesrcs:
                files += yield self.glob(glob)
            # self.addCompleteLog("files", repr(files))
            self.slavesrcs = files
            MultipleFileUpload.start(self)
        else:
            MultipleFileUpload.start(self)

    # Add links to each file when done
    def uploadDone(self, result, source, masterdest):
        name = os.path.basename(source)
        path = self.render(Interpolate(self._path))
        @path.addCallback
        def cb(path):
            self.addURL(name, '/files/%s/%s' % (path, name))

# Copy a folder to the buildbot master and link to the index file
class SaveDirectory(DirectoryUpload):
    def __init__(self, slavesrc, link=True, index=None, **kwargs):
        masterdest = Interpolate('public_html/files/%(prop:buildername)s/%(prop:buildnumber)s/%(kw:slavesrc)s',
                                 slavesrc=slavesrc)
        if link:
            url_format = '/files/%(prop:buildername)s/%(prop:buildnumber)s/%(kw:slavesrc)s'
            if index:
                url = Interpolate(url_format + '/' + index, slavesrc=slavesrc)
            else:
                url = Interpolate(url_format, slavesrc=slavesrc)
        else:
            url = None
        super(SaveDirectory, self).__init__(slavesrc=slavesrc, masterdest=masterdest, url=url, compress='gz', **kwargs)

def find(path):
    for root, dirs, files in os.walk(path):
        for file in files:
            yield os.path.join(root, file)

class NightlyReport(BuildStep):

    mail_to = 'atnnn@rethinkdb.com'

    def start(self):
        status = self.master.getStatus()
        test_full_builder = status.getBuilder('test-full')
        builds_tonight = filter(
            lambda build: build.started > time.time() - (24 * 60 * 60),
            [
                test_full_builder.getBuild(-1),
                test_full_builder.getBuild(-2)
            ]
        )
        if builds_tonight:
            message = '\n\n'.join(
                [
                    '\n'.join(self.format(test_full))
                    for test_full
                    in builds_tonight
                ]
            )
            subject = "RethinkDB Build Report for " + time.strftime("%A")
            self.send_message(subject, message)
        self.finished(SUCCESS)

    def format(test_full):
        revision = test_full.getProperty('got_revision')
        assert revision
        yield "Testing branch %s (%s)" % (test_full.getProperty('branch') or '', revision)
        for build in self.find_builds(revision):
            yield " * %s (%s) %s" % (
                build.getBuilder().getName(),
                ' '.join(build.text or ['still running']),
                self.build_link(build)
            )
        # TODO: tail logs of failed tests

    def build_link(build):
        return "http://dr-doom:8010/builders/%s/build/%d" % (build.getBuilder().getName(), build.number)

    def find_builds(revision):
        status = self.master.getStatus()
        for builder in status.getBuilderNames():
            for i in [1, 2]:
                for build in status.getBuilder(builder).getBuild(-i):
                    if build.getProperty('got_revision') == revision:
                        return build

    def send_message(subject, message):
        sendmail = Popen(['/usr/bin/sendmail', '-t'], stdin=PIPE)
        sendmail.communicate(
            '\n'.join(
                [
                    "From: buildbot@rethinkdb.com",
                    "To: %s" % (self.mail_to,),
                    "Subject: %s" % (subject,),
                    ""
                ] + message
            )
        )

class DeleteOldPublicFiles(BuildStep):
    folders = {
        'build-www': {'max-size': 2 * gb },
        'test-*': {'max-size': 20 * gb, 'min-age': 3 * day }
    }

    def start(self):
        stdio_log = self.addLog("stdio")

        @threads.deferToThread
        def scan():
            now = time.time()
            liberated = 0
            for pattern, config in self.folders.items():
                min_age = config.get('min-age', 1 * week)
                keep_after = now - min_age
                matched = glob.glob(os.path.join('public_html/files', pattern))
                stdio_log.addStdout('Pattern %s matched %s\n' % (pattern, str(matched)))
                for folder in matched:
                    folder_size = 0
                    files = sorted([
                        (os.path.getmtime(file), os.path.getsize(file), file)
                        for file in find(folder)
                    ])
                    for modified, size, file in files:
                        folder_size += size
                    stdio_log.addStdout('Folder %s contains %d bytes of deletable files\n' % (folder, folder_size))
                    for modified, size, file in files:
                        if folder_size < config['max-size']:
                            break
                        if keep_after < modified:
                            stdio_log.addStdout('Remaining files are too young to delete\n')
                            break
                        stdio_log.addStdout('Deleting: %s (%d bytes)\n' % (file, size))
                        try:
                            os.remove(file)
                        except Exception as e:
                            stdio_log.addStderr(str(e))
                        folder_size -= size
                        liberated += size
            return liberated

        @scan.addCallback
        def done(liberated):
            stdio_log.addStdout("Liberated " + str(liberated) + " bytes\n")
            self.finished(SUCCESS)

        @scan.addErrback
        def failed(error):
            stdio_log.addStderr(str(error) + '\n')
            self.finished(FAILURE)

# This build step stores the version of rethinkdb that is checked out
# into the `version' property
def ReadRethinkDBVersion():
    return SetPropertyFromCommand(
        command='./scripts/gen-version.sh',
        property='version',
        name='read version',
        haltOnFailure=True
    )

# Which deb packages to build
ubuntu_codenames = ['lucid', 'precise', 'saucy', 'trusty', 'utopic']
debian_codenames = ['wheezy', 'jessie']
deb_codenames = ubuntu_codenames + debian_codenames

centos_architectures = ['i686', 'x86_64']

def deb_schedulers():
    for codename in deb_codenames:
        yield ForceScheduler(
            name='force-package-' + codename,
            builderNames=['package-' + codename],
            codebases={'rethinkdb': {'repository': repos['rethinkdb']}}
        )

def centos_schedulers():
    for arch in centos_architectures:
        yield ForceScheduler(
            name='force-package-centos-' + arch,
            builderNames=['package-centos-' + arch],
            codebases={'rethinkdb': {'repository': repos['rethinkdb']}}
        )

schedulers = list(deb_schedulers()) + list(centos_schedulers()) + [

    # Build the next, v1.*.x and atnnn/test-buildbot branches on every change
    AnyBranchScheduler(
        name='next-and-pr',
        treeStableTimer=5,
        change_filter=ChangeFilter(branch_re='next|v[0-9].*|atnnn/test-buildbot', project='rethinkdb'),
        builderNames=["test-linux-default", "test-osx"],
        codebases={'rethinkdb': {'repository': repos['rethinkdb']}}
    ),

    # Force schedulers allow triggering builds from the web status page and the command line
    ForceScheduler(
        name="force-dummy",
        builderNames=["dummy"],
        codebases={'rethinkdb': {'repository': repos['rethinkdb']}}
    ),
    ForceScheduler(
        name="force-performance-regression",
        builderNames=["performance-regression"],
        codebases={'rethinkdb': {'repository': repos['rethinkdb']}}
    ),
    ForceScheduler(
        name="force-test-default",
        builderNames=["test-linux-default"],
        codebases={'rethinkdb': {'repository': repos['rethinkdb']}}
    ),
    ForceScheduler(
        name="force-package-osx",
        builderNames=["package-osx"],
        codebases={'rethinkdb': {'repository': repos['rethinkdb']}}
    ),
    ForceScheduler(
        name="force-package-dist",
        builderNames=["package-dist"],
        codebases={'rethinkdb': {'repository': repos['rethinkdb']}}
    ),
    ForceScheduler(
        name="force-test-osx",
        builderNames=["test-osx"],
        codebases={'rethinkdb': {'repository': repos['rethinkdb']}}
    ),
    ForceScheduler(
        name="force-delete-old-files",
        builderNames=["delete-old-files"],
        codebases={'rethinkdb': {'repository': repos['rethinkdb']}}
    ),
    ForceScheduler(
        name="force-test-full",
        builderNames=["test-full"],
        codebases={'rethinkdb': {'repository': repos['rethinkdb']}}
    ),
    ForceScheduler(
        name="force-nightly-report",
        builderNames=["nightly-report"],
        codebases={'rethinkdb': {'repository': repos['rethinkdb']}}
    ),

    # Nightly builds
    Nightly(
        name='nightly-next',
        branch='next',
        change_filter=ChangeFilter(project='rethinkdb'),
        hour=1, minute=20,
        builderNames=['test-full'],
        onlyIfChanged=True,
        codebases={'rethinkdb': {'repository': repos['rethinkdb']}}
    ),
    Nightly(
        name='nightly-v1.15.x',
        branch='v1.15.x',
        change_filter=ChangeFilter(project='rethinkdb'),
        hour=1, minute=0,
        builderNames=['test-full'],
        onlyIfChanged=True,
        codebases={'rethinkdb': {'repository': repos['rethinkdb']}}
    ),
    Nightly(
        name='nightly-delete-old-files',
        hour=2, minute=0,
        builderNames=['delete-old-files'],
        onlyIfChanged=False,
        branch='next',
        codebases={'rethinkdb': {'repository': repos['rethinkdb']}}
    ),
    Nightly(
        name='nightly-report',
        hour=6, minute=58,
        builderNames=['nightly-report'],
        # ignored but mandatory arguments
        branch='next',
        codebases={'rethinkdb': {'repository': repos['rethinkdb']}}
    ),
    Triggerable(
        name='all-tests',
        builderNames=(
            ['test-linux-full', 'test-osx', 'package-osx', 'performance-regression', 'package-dist'] +
            ['package-' + codename for codename in deb_codenames] +
            ['package-centos-' + arch for arch in centos_architectures]
        ),
        codebases={'rethinkdb': {'repository': repos['rethinkdb']}}
    ),
    Triggerable(
        name='dummy-triggerable',
        builderNames=['dummy'],
        codebases={'rethinkdb': {'repository': repos['rethinkdb']}}
    ),

    # Rebuild the whole website after every change to the docs or rethinkdb-www repos
    AnyBranchScheduler(
        name='poll-www',
        treeStableTimer=5,
        change_filter=ChangeFilter(codebase='www'),
        builderNames=["build-www"],
        codebases={'www': {'repository': repos['www']},
                   'docs': {'branch': 'master', 'repository': repos['docs']}}
    ),
    AnyBranchScheduler(
        name='poll-docs',
        treeStableTimer=5,
        change_filter=ChangeFilter(codebase='docs'),
        builderNames=["build-www"],
        codebases={'docs': {'repository': repos['docs']},
                   'www': {'branch': 'master', 'repository': repos['www']}}
    )
]

# Run the default set of tests
test_linux_default_steps = [
    Git(repourl=repos['rethinkdb'], mode='incremental', name='checkout', codebase='rethinkdb'),
    ShellCommand(command=["rm", "-rf", "test_results"], haltOnFailure=True, name='clean'),
    Configure(command=["./configure", "--allow-fetch", "--ccache"]),
    Make(flags=["DEBUG=1"]),
    RethinkDBTestSuite(tests=['default'], flags=["-j8", "-otest_results", "-H"]),
    SaveDirectory('test_results', index='test_results.html')
]

# Run all the tests
test_linux_full_steps = [
    Git(repourl=repos['rethinkdb'], mode='incremental', name='checkout', codebase='rethinkdb'),
    ShellCommand(command=["rm", "-rf", "test_results"], haltOnFailure=True, name='clean'),
    Configure(command=["./configure", "--allow-fetch"]),
    Make(flags=["DEBUG=1"]),
    RethinkDBTestSuite(flags=["-otest_results", "-H"]),
    SaveDirectory('test_results', index='test_results.html')
]

# Build the OS X package
package_osx_steps = [
    Git(repourl=repos['rethinkdb'], mode='full', name='checkout', codebase='rethinkdb'),
    ShellCommand(command='test "`sw_vers -productVersion`" == 10.7.5', name='check osx version', haltOnFailure=True),
    Configure(command=['./configure', '--static', 'all', '--fetch', 'all', '--dynamic', 'termcap', '--dynamic', 'curl']),
    Make('build-osx', ['BUILD_PORTABLE=1', 'ALLOW_WARNINGS=1', 'SPLIT_SYMBOLS=1'], timeout=2 * hour),
    ReadRethinkDBVersion(),
    # The dmg will be versioned eventually
    # SaveFile(Interpolate('build/package/osx/rethinkdb-%(prop:version)s.dmg')),
    SaveFile('build/packages/osx/rethinkdb.dmg', path='packages/%(prop:version)s/osx/%(kw:filename)s'),
    ShellCommand(command=['tar', 'cjvf', 'rethinkdb.dSYM.tbz2', 'rethinkdb.dSYM'],
                 workdir='build/build/release_clang_notcmalloc', name='compress dSYM'),
    SaveFile('build/release_clang_notcmalloc/rethinkdb.dSYM.tbz2', path='packages/%(prop:version)s/osx/%(kw:filename)s')
]

# Build the source distribution
package_dist_steps = [
    Git(repourl=repos['rethinkdb'], mode='full', codebase='rethinkdb'),
    Configure(command=['./configure', '--fetch', 'all']),
    ReadRethinkDBVersion(),
    Make('dist'),
    SaveFile(Interpolate('build/packages/rethinkdb-%(prop:version)s.tgz'),
             path='packages/%(prop:version)s/dist/%(kw:filename)s')
]

# Test on OS X
test_osx_steps = [
    Git(repourl=repos['rethinkdb'], mode='incremental', name='checkout', codebase='rethinkdb'),
    Configure(command=['./configure', '--allow-fetch']),
    Make('test-deps', ['DEBUG=1']),
    # TODO: Add an osx group to the rethinkdb repo that excludes tests that don't work on osx
    # RethinkDBTestSuite(tests=['osx']),
    ShellCommand(command='rm -rfv test_results'),
    RethinkDBTestSuite(tests=['unit', 'protobuf', 'regression', 'static_cluster', 'cpplint'],
                       flags=["-otest_results", "-H"]),
    SaveDirectory('test_results', index='test_results.html'),
    # TODO: why not just ql on the line above?
    ShellCommand(command='test/rql_test/test-runner', name='reql tests'),
]

# Build the Deb packages
# These steps require that the schroot environments be available
# and that the necessary dependencies are installed
def package_deb(codename, portable=False):
    if codename in ubuntu_codenames:
        build_dsc_flags = ['UBUNTU_RELEASE=' + codename]
    else:
        build_dsc_flags = ['DEB_RELEASE=' + codename]
    parallel = [Interpolate('-j%(prop:build-threads)s')]
    # TODO: pass the PACKAGE_BUILD_NUMBER variable to make when
    # rebuilding a previously built version
    if portable:
        build_dsc_flags += ['BUILD_PORTABLE=1', 'STATIC_V8=1']
    if codename == 'lucid':
        # Uses GCC 4.8 (which can be installed from ppa:ubuntu-toolchain-r/test)
        build_dsc_flags += ['DIST_CONFIGURE_DEFAULT=' + 'CXX=g++-4.8 LDFLAGS=-static-libstdc++ CXXFLAGS=-pthread']
        # See issue #475: make -j2 causes a segfault
        parallel = ['-j1']

    return [
        Git(repourl=repos['rethinkdb'], mode='full', name='checkout', codebase='rethinkdb'),
        ReadRethinkDBVersion(),
        ShellCommand(command=['rm', '-rf', 'build-deb'], workdir='.', name='clean artifacts', haltOnFailure=True),
        Configure(command=['./configure', '--fetch', 'all']),
        Make(target='fetch', haltOnFailure=True),
        Make(target='build-deb-src', flags=build_dsc_flags, haltOnFailure=True),
        SaveFiles(['*.dsc', '*.build', '*.changes', '*.tar.gz'], glob=True, workdir='build/build/packages', path='packages/%(prop:version)s/deb'),
        ShellCommand(command='dpkg-source -x ../build/build/packages/*.dsc source',
                     name='unpack dsc', workdir='build-deb', haltOnFailure=True),
        ShellCommand(command=['schroot', '-c', codename + '-amd64', '--', 'debuild', '-us', '-uc'] + parallel,
                     name='build amd64',
                     workdir='build-deb/source'),
        ShellCommand(command=['schroot', '-c', codename + '-i386', '--', 'linux32', 'debuild', '-us', '-uc'] + parallel,
                     name='build i386',
                     workdir='build-deb/source'),
        SaveFiles(['*.deb'], glob=True, workdir='build-deb', path='packages/%(prop:version)s/deb')
    ]

def package_centos(arch):
    props = {
        'x86_64': {
            'bits': '64',
            'wrap': ''
        },
        'i686': {
            'bits': '32',
            'wrap': 'linux32'
        }
    }[arch]
    return [
        Git(repourl=repos['rethinkdb'], mode='full', name='checkout', codebase='rethinkdb'),
        ReadRethinkDBVersion(),
        ShellCommand(command=Interpolate("echo %(prop:version)s > VERSION.OVERRIDE")),

        ShellCommand(command='schroot -c centos%(bits)s -- %(wrap)s scl enable devtoolset-2 scripts/build-rpm.sh' % props),
        SaveFiles(['build/release/rethinkdb.debug', 'build/packages/rethinkdb*.rpm'], glob=True, path='packages/%(prop:version)s/centos')
    ]

def deb_builders():
    for codename in deb_codenames:
        portable = codename == 'lucid'
        yield BuilderConfig(
            name = 'package-' + codename,
            slavenames=['newton'],
            factory=BuildFactory(package_deb(codename, portable=portable))
        )

def centos_builders():
    for arch in centos_architectures:
        yield BuilderConfig(
            name='package-centos-' + arch,
            slavenames=['newton'],
            factory=BuildFactory(package_centos(arch))
        )

# Build the website
build_www_steps = [
    Git(repourl=repos['www'], mode='incremental', name='checkout', codebase='www'),
    ShellCommand(command="sed -i 's|git@github.com:|https://github.com/|' .gitmodules Rakefile", name='tweak subs'),
    ShellCommand(command='rake clean', name='clean'),
    ShellCommand(command='rake dependencies', name='dependencies'),
    ShellCommand(command='rake init_subs', name='init_subs'),
    ShellCommand(command='rake pull_subs', name='pull_subs'),
    Git(repourl=repos['docs'], workdir='build/docs', mode='incremental', name='checkout', codebase='docs'),
    ShellCommand(command='rake build subs=no', name='build'),
    ShellCommand(command=Interpolate(r"""perl -i -pe "s^((url\(|src=|href=|action=)['\"]|0;url=)/^\1/files/build-www/%(prop:buildnumber)s/_site/^g" `find _site -regex '.*\.\(html\|css\)'`"""),
                 name="relative urls"),
    SaveDirectory('_site', index='index.html')
]

performance_regression_steps = [
    Git(repourl=repos['rethinkdb'], mode='incremental', codebase='rethinkdb'),
    Configure(command=['./configure', '--allow-fetch']),
    Make(),
    ShellCommand(command=['python', 'test.py', '/mnt/ssd/nightly-performance-test/'],
                 workdir='build/test/performance',
                 name='test',
                 timeout=2*hour),
    ShellCommand(command='cp `ls -t | head -1` report.html', workdir='build/test/performance/comparisons'),
    SaveFile('report.html', workdir='build/test/performance/comparisons')
]

# Trigger all-tests on the same git commit. Used by the nightly tests
test_full_steps = [
    Git(repourl=repos['rethinkdb'], mode='incremental', codebase='rethinkdb'),
    Trigger(schedulerNames=['dummy-triggerable'], waitForFinish=True, updateSourceStamp=True)
]

builders = list(deb_builders()) + list(centos_builders()) + [
    BuilderConfig(
        name="dummy",
        slavenames=["dr-doom"],
        factory=BuildFactory([ShellCommand(command=['echo','"Hello, World!"'])])
    ),
    BuilderConfig(
        name="performance-regression",
        slavenames=["magneto"],
        factory=BuildFactory(performance_regression_steps)
    ),
    BuilderConfig(
        name="test-linux-default",
        slavenames=["chaotica", "lavos", "ganondorf"],
        factory=BuildFactory(test_linux_default_steps)
    ),
    BuilderConfig(
        name="test-linux-full",
        slavenames=["chaotica", "lavos", "ganondorf"],
        factory=BuildFactory(test_linux_default_steps)
    ),
    BuilderConfig(
        name="package-osx",
        slavenames=["the-shadow"],
        factory=BuildFactory(package_osx_steps)
    ),
    BuilderConfig(
        name="package-dist",
        slavenames=["newton"],
        factory=BuildFactory(package_dist_steps)
    ),
    BuilderConfig(
        name="test-osx",
        slavenames=["gantz"],
        factory=BuildFactory(test_osx_steps)
    ),
    BuilderConfig(
        name="build-www",
        slavenames=["newton"],
        factory=BuildFactory(build_www_steps)
    ),
    BuilderConfig(
        name="delete-old-files",
        slavenames=["dr-doom"],
        factory=BuildFactory([DeleteOldPublicFiles()])
    ),
    BuilderConfig(
        name="test-full",
        slavenames=["dr-doom"],
        factory=BuildFactory(test_full_steps)
    ),
    BuilderConfig(
        name="nightly-report",
        slavenames=["dr-doom"],
        factory=BuildFactory([NightlyReport()])
    )
]

# Allow logging into the web status page to perform useful tasks
authz_cfg = authz.Authz(
    auth=auth.BasicAuth([(config.auth_user, config.auth_password)]),
    gracefulShutdown = 'auth',
    forceBuild = 'auth',
    forceAllBuilds = False,
    pingBuilder = False,
    stopBuild = 'auth',
    stopAllBuilds = 'auth',
    cancelPendingBuild = 'auth'
)

def buildGetBranches(build):
    sourceStamps = build.getSourceStamps()
    if sourceStamps is None:
        return ''
    elif len(sourceStamps) == 1:
        return sourceStamps[0].branch
    else:
        return ', '.join([ss.codebase + ':' + ss.branch for ss in sourceStamps])

class SlackStatus(slack.Slack):
    def buildStarted(self, name, build):
        try:
            buildnumber = build.getProperty('buildnumber') or -1
            sourceStamps = build.getSourceStamps() or []
            branches = buildGetBranches(build)
            eta = build.getETA()
            eta_info = " (eta: " + str(math.ceil(eta)) + "s)" if eta else ""
            branch_info = " in branch " + branches if branches else ""
            self.send("Starting build "
                      + slack.link('http://dr-doom:8010/builders/%s/builds/%d' % (name, buildnumber),
                                   name + ' #' + str(buildnumber))
                      + eta_info
                      + branch_info)
        except Exception as e:
            self.send(traceback.format_exc())

    def buildFinished(self, name, build, results):
        try:
            buildnumber = build.getProperty('buildnumber')
            branches = buildGetBranches(build)
            link = slack.link('http://dr-doom:8010/builders/%s/builds/%d' % (name, buildnumber),
                              name + ' #' + str(buildnumber))
            status = {
                EXCEPTION: 'EXCEPTION',
                FAILURE: 'FAILURE',
                WARNINGS: 'WARNINGS',
                SUCCESS: 'SUCCESS'
            }.get(results, 'INVALID_RESULT')

            info = " ".join(build.getText())
            users = ", ".join(build.getResponsibleUsers())

            def adjust_url(url):
                try:
                    if url[0] == '/':
                        return 'http://dr-doom:8010' + url
                except Exception:
                    pass
                return url

            urls = [
                step.getName() + ': ' + slack.link(adjust_url(url), name)
                for step in build.getSteps()
                for name, url in step.getURLs().items()
                if name not in ['stdio', 'property changes']
                or step.getResults()[0] == 'FAILURE'
            ]
            url_field = [slack.field("Results", '\n'.join(urls))] if urls else []

            color = {
                EXCEPTION: '#1111FF',
                FAILURE: 'danger',
                WARNINGS: 'warning',
                SUCCESS: 'good'
            }.get(results, 'danger')

            who = [slack.field("Who", users, True)] if users else []
            what = [slack.field("Info", info, True)] if info else []
            branch_field = [slack.field("Branch", branches, True)] if branches else []

            self.send(
                attachments=[
                    slack.attachment(
                        fallback = "Build %s: %s%s" % (link, status, " in branch %s" % branches if branches else ""),
                        pretext = status,
                        color = color,
                        fields = [
                            slack.field("Build", link, True),
                        ] + branch_field + who + what + url_field
                    )
                ]
            )
        except Exception as e:
            self.send(traceback.format_exc())


status = [

    # The web status
    html.WebStatus(http_port=8010, authz=authz_cfg),

    # Slack bot
    SlackStatus(webhook=config.slack_webhook_url),

    # To enable emails when builds break, uncomment this MailNotifier
    # and filter only @rethinkdb.com users
    # MailNotifier(
    #     fromaddr="buildbot@rethinkdb.com",
    #     buildSetSummary=True,
    #     sendToInterestedUsers=False,
    #     mode=['change'],
    #     extraRecipients=["atnnn@rethinkdb.com"]
    # )
]

BuildmasterConfig = {
    'slaves': slaves,
    'protocols': protocols,
    'change_source': change_source,
    'schedulers': schedulers,
    'builders': builders,
    'status': status,
    'codebaseGenerator': lambda change: change['project'],

    'title': "RethinkDB",
    'titleURL': "http://rethinkdb.com/",
    'buildbotURL': "http://dr-doom:8010/",
    'db': { 'db_url' : "sqlite:///state.sqlite" }
}
