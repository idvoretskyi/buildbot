import os
import random

from buildbot.buildslave            import BuildSlave
from buildbot.changes.filter        import ChangeFilter
from buildbot.changes.gitpoller     import GitPoller
from buildbot.config                import BuilderConfig
from buildbot.process.buildstep     import BuildStep, BuildStepFailed, CommandMixin
from buildbot.process.factory       import BuildFactory
from buildbot.process.properties    import Interpolate, Property
from buildbot.scheduler             import Try_Userpass
from buildbot.schedulers.basic      import AnyBranchScheduler
from buildbot.schedulers.forcesched import ForceScheduler
from buildbot.schedulers.timed      import Nightly
from buildbot.status                import html
from buildbot.status                import words
from buildbot.status.mail           import MailNotifier
from buildbot.status.web            import authz, auth
from buildbot.steps.shell           import Configure, ShellCommand, SetPropertyFromCommand
from buildbot.steps.source.git      import Git
from buildbot.steps.transfer        import FileUpload, DirectoryUpload, MultipleFileUpload, makeStatusRemoteCommand
from twisted.internet               import defer
from twisted.python                 import log
from buildbot.status.results        import EXCEPTION, FAILURE, SUCCESS, WARNINGS

import config
reload(config)

import slack
reload(slack)

###
# TODO
#
# * poll for pull requests as well as branches
# * Only email @rethinkdb.org emails
# * Emails when test slave goes down
# * Kill stuck builds
# * show codebase and branch name in waterfall next to committer name

# The repositories used
# Note that rethinkdb-www is a private repo on github. Slaves that access
# this repo should have Thinker-Bot's Github auth token in ~/.netrc
repos = {
    'rethinkdb': 'git://github.com/rethinkdb/rethinkdb',
    'docs': 'git://github.com/rethinkdb/docs',
    'www': 'https://github.com/rethinkdb/rethinkdb-www'
}

# The slaves that are allowed to connect
# The special `disabled' slave can be used to explicitly
# disable a builder
slaves = [
    BuildSlave("dr-doom",    "lorem"),
    BuildSlave("newton",     "ipsum",       properties={'build-threads':8,   'test-threads':1}, max_builds=3),
    BuildSlave("chaotica",   "dolor",       properties={'build-threads':20,  'test-threads':5}, max_builds=1),
    BuildSlave("lavos",      "sit",         properties={'build-threads':20,  'test-threads':5}, max_builds=1),
    BuildSlave("ganondorf",  "amet",        properties={'build-threads':20,  'test-threads':5}, max_builds=1),
    BuildSlave("magneto",    "consectetur"),
    BuildSlave("puzzler",    "adipisicing"),
    BuildSlave("electro",    "elit"),
    BuildSlave("riddler",    "sed"),
    BuildSlave("sinister",   "do"),
    BuildSlave("arclight",   "eiusmod"),
    BuildSlave("lex-luthor", "tempor"),
    BuildSlave("the-shadow", "incididunt",  properties={'build-threads':1,  'test-threads':1}, max_builds=1),
    BuildSlave("gantz",      "ut",          properties={'build-threads':20, 'test-threads':5}, max_builds=1),
    BuildSlave("deadshot",   "labore"),
    BuildSlave("disabled", str(random.random()))
]

# What port to listen on for slaves
protocols = {'pb': {'port': 9989}}

kb = 1024
mb = 1024 * kb
minute = 60
hour = 60 * minute

# Poll the repos for changes
change_source = [
    GitPoller(
        repos['rethinkdb'],
        workdir='gitpoller-rethinkdb',
        branches=True,
        project='rethinkdb',
        pollinterval=10 * minute
    ),
    GitPoller(
        repos['docs'],
        workdir='gitpoller-docs',
        branches=True,
        project='docs',
        pollinterval=10 * minute
    ),
    GitPoller(
        repos['www'],
        workdir='gitpoller-www',
        branches=True,
        project='www',
        pollinterval=10 * minute
    )
]

class RethinkDBTestSuite(ShellCommand):
    """Run the RethinkDB test suite"""

    description = 'testing'
    descriptionDone = 'test'
    timeout = 2 * hour
    haltOnFailure = False

    def __init__(self, tests=[], flags=[], **kwargs):
        command = ['test/run', '-j', Property('test-threads')] + tests + flags

        kwargs.setdefault('name', ' '.join(['test'] + tests))

        super(RethinkDBTestSuite, self).__init__(command=command, **kwargs)

class Make(ShellCommand):
    """Use make to build in the specified directory"""

    description = 'building'
    descriptionDone = 'make'
    haltOnFailure = True

    def __init__(self, target=None, flags=[], **kwargs):
        command = ['make', '-j', Property('build-threads')] + ([target] if target else []) + flags

        kwargs.setdefault('name', 'make %s' % (target or ''))

        super(Make, self).__init__(command=command, **kwargs)

# Copy a file to the buildbot master and link to it
#
# This wrapper around FileUpload copies the file to
# public_html/files/buildname/buildnumber/ and adds
# a link to it
class SaveFile(FileUpload):

    description = 'uploading'
    descriptionDone = 'upload'

    def __init__(self, slavesrc, link=True, **kwargs):
        masterdest = Interpolate('public_html/files/%(prop:buildername)s/%(prop:buildnumber)s/%(kw:slavesrc)s',
                                 slavesrc=slavesrc)
        if link:
            url = Interpolate('/files/%(prop:buildername)s/%(prop:buildnumber)s/%(kw:slavesrc)s', slavesrc=slavesrc)
        else:
            url = None

        kwargs.setdefault('descriptionSuffix', os.path.basename(slavesrc))

        super(SaveFile, self).__init__(slavesrc=slavesrc, masterdest=masterdest, url=url, **kwargs)

# Copy multiple files to the buildbot master and link to them
#
# This wrapper around MultipleFileUpload also adds a glob argument. When true,
# the globs in the slavesrcs are expanded before the files are fetched.
class SaveFiles(MultipleFileUpload, CommandMixin):
    def __init__(self, slavesrcs, glob=False, **kwargs):
        self.__glob = glob
        masterdest = Interpolate('public_html/files/%(prop:buildername)s/%(prop:buildnumber)s')
        super(SaveFiles, self).__init__(slavesrcs=slavesrcs, masterdest=masterdest, **kwargs)
        self.addFactoryArguments(glob=glob)

    # The glob method in CommandMixin seems broken. This one seems to work.
    def glob(self, glob):
        return self._runRemoteCommand(
            'glob', True, {'path': self._getWorkdir() + '/' + glob, 'logEnviron': False},
            makeResult=lambda cmd: cmd.updates['files'][0])

    # Expand the globs before calling MultipleFileUpload.start
    @defer.inlineCallbacks
    def start(self):
        if self.__glob:
            files = []
            for glob in self.slavesrcs:
                files += yield self.glob(glob)
            # self.addCompleteLog("files", repr(files))
            self.slavesrcs = files
            MultipleFileUpload.start(self)
        else:
            MultipleFileUpload.start(self)

    # Add links to each file when done
    def uploadDone(self, result, source, masterdest):
        name = os.path.basename(source)
        self.addURL(name, '/files/%s/%d/%s' % (
            self.getProperty('buildername'),
            self.getProperty('buildnumber'),
            name
        ))

# Copy a folder to the buildbot master and link to the index file
class SaveDirectory(DirectoryUpload):
    def __init__(self, slavesrc, link=True, index=None, **kwargs):
        masterdest = Interpolate('public_html/files/%(prop:buildername)s/%(prop:buildnumber)s/%(kw:slavesrc)s',
                                 slavesrc=slavesrc)
        if link:
            url_format = '/files/%(prop:buildername)s/%(prop:buildnumber)s/%(kw:slavesrc)s'
            if index:
                url = Interpolate(url_format + '/' + index, slavesrc=slavesrc)
            else:
                url = Interpolate(url_format, slavesrc=slavesrc)
        else:
            url = None
        super(SaveDirectory, self).__init__(slavesrc=slavesrc, masterdest=masterdest, url=url, compress='gz', **kwargs)

# This build step stores the version of rethinkdb that is checked out
# into the `version' property
def ReadRethinkDBVersion():
    return SetPropertyFromCommand(
        command='./scripts/gen-version.sh',
        property='version',
        name='read version',
        haltOnFailure=True
    )

# Which Ubuntu packages to build
ubuntu_codenames = ['lucid', 'precise', 'saucy', 'trusty']

def ubuntu_schedulers():
    for codename in ubuntu_codenames:
        yield ForceScheduler(
            name='force-package-' + codename,
            builderNames=['package-' + codename],
            codebases={'rethinkdb': {'repository': repos['rethinkdb']}}
        )

schedulers = list(ubuntu_schedulers()) + [

    # Build the next, v1.*.x and atnnn/test-buildbot branches on every change
    AnyBranchScheduler(
        name='next-and-pr',
        treeStableTimer=5,
        change_filter=ChangeFilter(branch_re='next|v[0-9].*|atnnn/test-buildbot', project='rethinkdb'),
        builderNames=["test-linux-default", "test-osx"],
        codebases={'rethinkdb': {'repository': repos['rethinkdb']}}
    ),

    # Force schedulers allow triggering builds from the web status page and the command line
    ForceScheduler(
        name="force-dummy",
        builderNames=["dummy"],
        codebases={'rethinkdb': {'repository': repos['rethinkdb']}}
    ),
    ForceScheduler(
        name="force-test-default",
        builderNames=["test-linux-default"],
        codebases={'rethinkdb': {'repository': repos['rethinkdb']}}
    ),
    ForceScheduler(
        name="force-package-osx",
        builderNames=["package-osx"],
        codebases={'rethinkdb': {'repository': repos['rethinkdb']}}
    ),
    ForceScheduler(
        name="force-test-osx",
        builderNames=["test-osx"],
        codebases={'rethinkdb': {'repository': repos['rethinkdb']}}
    ),

    # Bightly builds
    Nightly(
        name='nightly',
        branch='next',
        change_filter=ChangeFilter(project='rethinkdb'),
        hour=3, minute=0,
        builderNames=(
            ['test-linux-full', 'package-osx'] +
            ['package-' + codename for codename in ubuntu_codenames]
        ),
        onlyIfChanged=True,
        codebases={'rethinkdb': {'repository': repos['rethinkdb']}}
    ),

    # Rebuild the whole website after every change to the docs or rethinkdb-www repos
    AnyBranchScheduler(
        name='poll-www',
        treeStableTimer=5,
        change_filter=ChangeFilter(codebase='www'),
        builderNames=["build-www"],
        codebases={'www': {'repository': repos['www']},
                   'docs': {'branch': 'master', 'repository': repos['docs']}}
    ),
    AnyBranchScheduler(
        name='poll-docs',
        treeStableTimer=5,
        change_filter=ChangeFilter(codebase='docs'),
        builderNames=["build-www"],
        codebases={'docs': {'repository': repos['docs']},
                   'www': {'branch': 'master', 'repository': repos['www']}}
    )
]

# Run the default set of tests
test_linux_default_steps = [
    Git(repourl=repos['rethinkdb'], mode='incremental', name='checkout', codebase='rethinkdb'),
    ShellCommand(command=["rm", "-rf", "test_results"], haltOnFailure=True, name='clean'),
    Configure(command=["./configure", "--allow-fetch", "--ccache"]),
    Make(flags=["DEBUG=1"]),
    RethinkDBTestSuite(tests=['default'], flags=["-j8", "-otest_results", "-H"]),
    SaveDirectory('test_results', index='test_results.html')
]

# Run all the tests
test_linux_full_steps = [
    Git(repourl=repos['rethinkdb'], mode='incremental', name='checkout', codebase='rethinkdb'),
    ShellCommand(command=["rm", "-rf", "test_results"], haltOnFailure=True, name='clean'),
    Configure(command=["./configure", "--allow-fetch"]),
    Make(flags=["DEBUG=1"]),
    RethinkDBTestSuite(flags=["-otest_results", "-H"]),
    SaveDirectory('test_results', index='test_results.html')
]

# Build the OS X package
package_osx_steps = [
    Git(repourl=repos['rethinkdb'], mode='full', name='checkout', codebase='rethinkdb'),
    ShellCommand(command='test "`sw_vers -productVersion`" == 10.7.5', name='check osx version', haltOnFailure=True),
    Configure(command=['./configure', '--static', 'all', '--dynamic', 'termcap', '--dynamic', 'z', '--fetch', 'all']),
    Make('build-osx', ['BUILD_PORTABLE=1', 'ALLOW_WARNINGS=1', 'SPLIT_SYMBOLS=1']),
    # The dmg will be versioned eventually
    # ReadRethinkDBVersion,
    # SaveFile(Interpolate('build/package/osx/rethinkdb-%(prop:version)s.dmg')),
    SaveFile('build/packages/osx/rethinkdb.dmg'),
    ShellCommand(command=['tar', 'cjvf', 'rethinkdb.dSYM.tbz2', 'rethinkdb.dSYM'],
                 workdir='build/build/release_clang_notcmalloc', name='compress dSYM'),
    SaveFile('build/release_clang_notcmalloc/rethinkdb.dSYM.tbz2')
]

# Test on OS X
test_osx_steps = [
    Git(repourl=repos['rethinkdb'], mode='incremental', name='checkout', codebase='rethinkdb'),
    Configure(command=['./configure', '--allow-fetch']),
    Make('test-deps', ['DEBUG=1']),
    # Add an osx group to the rethinkdb repo that excludes tests that don't work on osx
    # RethinkDBTestSuite(tests=['osx']),
    RethinkDBTestSuite(tests=['unit', 'protobuf', 'regression', 'static_cluster', 'cpplint']),
    # TODO: why not just ql on the line above?
    ShellCommand(command='test/rql_test/test-runner', name='reql tests'),
]

# Build the Ubuntu packages
# These steps require that the schroot environments be available
# and that the necessary dependencies are installed
def package_ubuntu(codename, portable=False):
    build_dsc = 'make -j 8 UBUNTU_RELEASE=' + codename + ' build-deb-src PACKAGE_BUILD_NUMBER=$PACKAGE_BUILD_NUMBER'
    if portable:
        build_dsc += ' BUILD_PORTABLE=1 STATIC_V8=1'
    return [
        Git(repourl=repos['rethinkdb'], mode='full', name='checkout', codebase='rethinkdb'),
        ReadRethinkDBVersion(),
        ShellCommand(command='rm -rf build/build/packages build-deb', workdir='.', name='clean artifacts', haltOnFailure=True),
        ShellCommand(command='./configure --fetch all', name='configure', haltOnFailure=True),
        ShellCommand(command='make fetch -j8', name='fetch deps', haltOnFailure=True),
        ShellCommand(command=build_dsc, name='build dsc', haltOnFailure=True),
        SaveFiles(['*.dsc', '*.build', '*.changes', '*.tar.gz'], glob=True, workdir='build/build/packages'),
        ShellCommand(command='dpkg-source -x ../build/build/packages/*.dsc',
                     name='unpack dsc', workdir='build-deb', haltOnFailure=True),
        ShellCommand(command='schroot -c ' + codename + '-amd64 -- debuild -us -uc -j8',
                     name='build amd64',
                     workdir=Interpolate('build-deb/rethinkdb-%(prop:version)s')),
        ShellCommand(command='schroot -c ' + codename + '-i386 -- linux32 debuild -us -uc -j8',
                     name='build i386',
                     workdir=Interpolate('build-deb/rethinkdb-%(prop:version)s')),
        SaveFiles(['*.deb'], glob=True, workdir='build-deb')
    ]

def ubuntu_builders():
    for codename in ubuntu_codenames:
        portable = codename == 'lucid'
        yield BuilderConfig(
            name = 'package-' + codename,
            slavenames=['newton'],
            factory=BuildFactory(package_ubuntu(codename, portable=portable))
        )

# Build the website
build_www_steps = [
    Git(repourl=repos['www'], mode='incremental', name='checkout', codebase='www'),
    ShellCommand(command="sed -i 's|git@github.com:|https://github.com/|' .gitmodules Rakefile", name='tweak subs'),
    ShellCommand(command='rake clean', name='clean'),
    ShellCommand(command='rake dependencies', name='dependencies'),
    ShellCommand(command='rake init_subs', name='init_subs'),
    ShellCommand(command='rake pull_subs', name='pull_subs'),
    Git(repourl=repos['docs'], workdir='build/docs', mode='incremental', name='checkout', codebase='docs'),
    ShellCommand(command='rake build subs=no', name='build'),
    ShellCommand(command=Interpolate(r"""perl -i -pe "s^((url\(|src=|href=|action=)['\"]|0;url=)/^\1/files/build-www/%(prop:buildnumber)s/_site/^g" `find _site -regex '.*\.\(html\|css\)'`"""),
                 name="relative urls"),
    SaveDirectory('_site', index='index.html')
]

builders = list(ubuntu_builders()) + [
    BuilderConfig(
        name="dummy",
        slavenames=["dr-doom"],
        factory=BuildFactory([ShellCommand(command=['echo','"Hello, World!"'])])
    ),
    BuilderConfig(
        name="test-linux-default",
        slavenames=["chaotica", "lavos", "ganondorf"],
        factory=BuildFactory(test_linux_default_steps)
    ),
    BuilderConfig(
        name="test-linux-full",
        slavenames=["chaotica", "lavos", "ganondorf"],
        factory=BuildFactory(test_linux_default_steps)
    ),
    BuilderConfig(
        name="package-osx",
        slavenames=["the-shadow"],
        factory=BuildFactory(package_osx_steps)
    ),
    BuilderConfig(
        name="test-osx",
        slavenames=["gantz"],
        factory=BuildFactory(test_osx_steps)
    ),
    BuilderConfig(
        name="build-www",
        slavenames=["newton"],
        factory=BuildFactory(build_www_steps)
    )
]

# Allow logging into the web status page to perform useful tasks
authz_cfg = authz.Authz(
    auth=auth.BasicAuth([(config.auth_user, config.auth_password)]),
    gracefulShutdown = 'auth',
    forceBuild = 'auth',
    forceAllBuilds = False,
    pingBuilder = False,
    stopBuild = 'auth',
    stopAllBuilds = 'auth',
    cancelPendingBuild = 'auth'
)

class SlackStatus(slack.Slack):
    def buildStarted(self, name, build):
        try:
            buildnumber = build.getProperty('buildnumber')
            branch = build.getProperty('branch')
            eta = build.getETA() or 'NaN'
            self.send("Starting build "
                      + slack.link('http://dr-doom:8010/builders/%s/builds/%d' % (name, buildnumber),
                                   name + ' #' + str(buildnumber))
                      + " " + " ".join(build.getText())
                      + " (ETA:" + str(eta) + "s)"
                      + (" in branch " + str(branch) if branch else ""))
        except Exception as e:
            self.send('Exception: ' + repr(e))

    def buildFinished(self, name, build, results):
        try:
            buildnumber = build.getProperty('buildnumber')
            branch = build.getProperty('branch')
            link = slack.link('http://dr-doom:8010/builders/%s/builds/%d' % (name, buildnumber),
                              name + ' #' + str(buildnumber))
            status = str(results).upper()
            info = " ".join(build.getText())
            users = " ".join(build.getResponsibleUsers())

            # TODO
            # steps = build.getSteps()
            # failed_steps = ...
            # logs = [step.getLogs() for step in failed_steps]

            color = {EXCEPTION: '#1111FF', FAILURE: 'danger', WARNINGS: 'warning', SUCCESS: 'good'}.get(results, 'warning')

            who = [slack.field("Who", users)] if users else []
            what = [slack.field("Info", info)] if info else []
            branch_field = [slack.field("Branch", branch)] if branch else []

            self.send(
                attachments=[
                    slack.attachment(
                        fallback = "Build %s %s %s" % (link, status, " in branch %s" % branch if branch else ""),
                        pretext = status,
                        color = color,
                        fields = [
                            slack.field("Build", link),
                        ] + branch_field + who + what
                    )
                ]
            )
        except Exception as e:
            self.send('Exception: ' + repr(e))


status = [

    # The web status
    html.WebStatus(http_port=8010, authz=authz_cfg),

    # Slack bot
    SlackStatus(webhook=config.slack_webhook_url),

    # The IRC bot
    words.IRC(
        host=config.irc_server,
        nick=config.irc_nickname,
        channels=[config.irc_channel],
        password=config.irc_password,
        allowForce=True,
        useColors=True,
        notify_events = {
            'exception': 1,
            #'successToFailure': 1,
            #'failureToSuccess': 1,
            'started': 1,
            'finished': 1,
            'success': 1,
            'failure': 1
        }
    ),

    # To enable emails when builds break, uncomment this MailNotifier
    # and filter only @rethinkdb.com users
    # MailNotifier(
    #     fromaddr="buildbot@rethinkdb.com",
    #     buildSetSummary=True,
    #     sendToInterestedUsers=False,
    #     mode=['change'],
    #     extraRecipients=["atnnn@rethinkdb.com"]
    # )
]

BuildmasterConfig = {
    'slaves': slaves,
    'protocols': protocols,
    'change_source': change_source,
    'schedulers': schedulers,
    'builders': builders,
    'status': status,
    'codebaseGenerator': lambda change: change['project'],

    'title': "RethinkDB",
    'titleURL': "http://rethinkdb.com/",
    'buildbotURL': "http://dr-doom:8010/",
    'db': { 'db_url' : "sqlite:///state.sqlite" }
}
