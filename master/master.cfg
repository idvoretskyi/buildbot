import os
import random

from buildbot.buildslave            import BuildSlave
from buildbot.changes.filter        import ChangeFilter
from buildbot.changes.gitpoller     import GitPoller
from buildbot.config                import BuilderConfig
from buildbot.process.buildstep     import BuildStep
from buildbot.process.factory       import BuildFactory
from buildbot.process.properties    import Interpolate
from buildbot.scheduler             import Try_Userpass
from buildbot.schedulers.basic      import AnyBranchScheduler
from buildbot.schedulers.forcesched import ForceScheduler
from buildbot.schedulers.timed      import Nightly
from buildbot.status                import html
from buildbot.status                import words
from buildbot.status.mail           import MailNotifier
from buildbot.status.web            import authz, auth
from buildbot.steps.shell           import ShellCommand, SetPropertyFromCommand
from buildbot.steps.source.git      import Git
from buildbot.steps.transfer        import FileUpload, DirectoryUpload

import config
reload(config)

###
# TODO
#
# * Test docs repo
# * Test www repo
# * Emails on test and build failures
# * Thorough tests on next and PR branch
# * merge builds on the same branch
# * Emails when test slave goes down
# * Kill stuck builds
# * auto-scroll in log page
# * show branch name in waterfall instead of committer name

repos = {
    'rethinkdb': 'git://github.com/rethinkdb/rethinkdb',
    'docs': 'git://github.com/rethinkdb/docs',
    'www': 'https://github.com/rethinkdb/rethinkdb-www'
}

slaves = [
    BuildSlave("dr-doom",    "lorem"),
    BuildSlave("newton",     "ipsum"),
    BuildSlave("chaotica",   "dolor"),
    BuildSlave("lavos",      "sit"),
    BuildSlave("ganondorf",  "amet"),
    BuildSlave("magneto",    "consectetur"),
    BuildSlave("puzzler",    "adipisicing"),
    BuildSlave("electro",    "elit"),
    BuildSlave("riddler",    "sed"),
    BuildSlave("sinister",   "do"),
    BuildSlave("arclight",   "eiusmod"),
    BuildSlave("lex-luthor", "tempor"),
    BuildSlave("the-shadow", "incididunt"),
    BuildSlave("gantz",      "ut"),
    BuildSlave("deadshot",   "labore"),
    BuildSlave("disabled", str(random.random()))
]

protocols = {'pb': {'port': 9989}}

kb = 1024
mb = 1024 * kb

change_source = [
    GitPoller(
        repos['rethinkdb'],
        workdir='gitpoller-rethinkdb',
        branches=True,
        project='rethinkdb',
        pollinterval=600 # seconds
    ),
    GitPoller(
        repos['docs'],
        workdir='gitpoller-docs',
        branches=True,
        project='docs',
        pollinterval=600 # seconds
    ),
    GitPoller(
        repos['www'],
        workdir='gitpoller-www',
        branches=True,
        project='www',
        pollinterval=600 # seconds
    )
]

class ShellCommandHTMLReport(ShellCommand):
    def __init__(self, htmlReports={}, **kwargs):
        self.htmlReports = htmlReports
        super(ShellCommandHTMLReport, self).__init__(
            self,
            logfiles={ 'raw ' + name: path for name, path in htmlReports.items()},
            **kwargs)

    def createSummary(self, log):
        for name in self.htmlReports:
            self.addHTMLLog('html ' + name, self.getLog('raw ' + name).getText())

class SaveFile(FileUpload):
    def __init__(self, slavesrc, link=True, **kwargs):
        masterdest = Interpolate('public_html/files/%(prop:buildername)s/%(prop:buildnumber)s/%(kw:slavesrc)s',
                                 slavesrc=slavesrc)
        if link:
            url = Interpolate('/files/%(prop:buildername)s/%(prop:buildnumber)s/%(kw:slavesrc)s', slavesrc=slavesrc)
        else:
            url = None
        super(SaveFile, self).__init__(slavesrc=slavesrc, masterdest=masterdest, url=url, **kwargs)

class SaveDirectory(DirectoryUpload):
    def __init__(self, slavesrc, link=True, index=None, **kwargs):
        masterdest = Interpolate('public_html/files/%(prop:buildername)s/%(prop:buildnumber)s/%(kw:slavesrc)s',
                                 slavesrc=slavesrc)
        if link:
            url_format = '/files/%(prop:buildername)s/%(prop:buildnumber)s/%(kw:slavesrc)s'
            if index:
                url = Interpolate(url_format + '/' + index, slavesrc=slavesrc)
            else:
                url = Interpolate(url_format, slavesrc=slavesrc)
        else:
            url = None
        super(SaveDirectory, self).__init__(slavesrc=slavesrc, masterdest=masterdest, url=url, compress='gz', **kwargs)

schedulers = [
    AnyBranchScheduler(
        name='next-and-pr',
        treeStableTimer=5,
        change_filter=ChangeFilter(branch_re='next|v[0-9].*|atnnn/test-buildbot', project='rethinkdb'),
        builderNames=["test-default"],
        codebases={'rethinkdb': {'repository': repos['rethinkdb']}}
    ),
    ForceScheduler(
        name="force-test-default",
        builderNames=["test-default"],
        codebases={'rethinkdb': {'repository': repos['rethinkdb']}}
    ),
    ForceScheduler(
        name="force-package-osx",
        builderNames=["package-osx"],
        codebases={'rethinkdb': {'repository': repos['rethinkdb']}}
    ),
    Try_Userpass(
        name='test-default',
        builderNames=['test-default'],
        port=5555,
        userpass=[(config.auth_user, config.auth_password)]
    ),
    Nightly(
        name='nightly',
        branch='next',
        change_filter=ChangeFilter(project='rethinkdb'),
        hour=3, minute=0,
        builderNames=['test-full', 'package-osx'],
        onlyIfChanged=True,
        codebases={'rethinkdb': {'repository': repos['rethinkdb']}}
    ),
    AnyBranchScheduler(
        name='poll-www',
        treeStableTimer=5,
        change_filter=ChangeFilter(codebase='www'),
        builderNames=["build-www"],
        codebases={'www': {'repository': repos['www']},
                   'docs': {'branch': 'master', 'repository': repos['docs']}}
    ),
    AnyBranchScheduler(
        name='poll-docs',
        treeStableTimer=5,
        change_filter=ChangeFilter(codebase='docs'),
        builderNames=["build-www"],
        codebases={'docs': {'repository': repos['docs']},
                   'www': {'branch': 'master', 'repository': repos['www']}}
    )
]

test_default_steps = [
    Git(repourl=repos['rethinkdb'], mode='incremental', name='checkout', codebase='rethinkdb'),
    ShellCommand(command=["rm", "-rf", "test_results"], haltOnFailure=True, name='clean'),
    ShellCommand(command=["./configure", "--allow-fetch", "--ccache"], haltOnFailure=True, name='configure'),
    ShellCommand(command=["make", "-j20", "DEBUG=1"], haltOnFailure=True, name='build'),
    ShellCommand(command=["test/run", "default", "-j8", "-otest_results", "-H"], name='test'),
    SaveDirectory('test_results', index='test_results.html')
]

test_full_steps = [
    Git(repourl=repos['rethinkdb'], mode='incremental', name='checkout', codebase='rethinkdb'),
    ShellCommand(command=["rm", "-rf", "test_results"], haltOnFailure=True, name='clean'),
    ShellCommand(command=["./configure", "--allow-fetch"], haltOnFailure=True, name='configure'),
    ShellCommand(command=["make", "-j20", "DEBUG=1"], haltOnFailure=True, name='build'),
    ShellCommandHTMLReport(htmlReports={'report': 'test_results/test_results.html'},
                           command=["test/run", "-j8", "-otest_results", "-H"],
                           name='test')
]

package_osx_steps = [
    Git(repourl=repos['rethinkdb'], mode='full', name='checkout', codebase='rethinkdb'),
    # Disabled for testing
    # ShellCommand(command='test "`sw_vers -productVersion`" == 10.7.5', name='check osx version', haltOnFailure=True),
    ShellCommand(command='./configure --static all --dynamic termcap --dynamic z --fetch all', name='configure'),
    ShellCommand(command='make build-osx BUILD_PORTABLE=1 ALLOW_WARNINGS=1 SPLIT_SYMBOLS=1', name='make'),
    SetPropertyFromCommand(command='./scripts/gen-version.sh', property='version', name='read version'),
    SaveFile(Interpolate('build/package/osx/rethinkdb-%(prop:version)s.dmg')),
    SaveFile(Interpolate('build/packages/osx/rethinkdb.dmg')),
    ShellCommand(command='tar cjvf rethinkdb.dSYM.tbz2 rethinkdb.dSYM',
                 workdir='build/release_clang_notcmalloc', name='zip debug files'),
    SaveFile('build/release_clang_notcmalloc/rethinkdb.dSYM.tbz2')
]

build_www_steps = [
    Git(repourl=repos['www'], mode='incremental', name='checkout', codebase='www'),
    ShellCommand(command="sed -i 's|git@github.com:|https://github.com/|' .gitmodules Rakefile", name='tweak subs'),
    ShellCommand(command='rake clean', name='clean'),
    ShellCommand(command='rake dependencies', name='dependencies'),
    ShellCommand(command='rake init_subs', name='init_subs'),
    ShellCommand(command='rake pull_subs', name='pull_subs'),
    Git(repourl=repos['docs'], workdir='build/docs', mode='incremental', name='checkout', codebase='docs'),
    ShellCommand(command='rake build subs=no', name='build'),
    ShellCommand(command=Interpolate(r"""perl -i -pe "s^((url\(|src=|href=|action=)['\"]|0;url=)/^\1/files/build-www/%(prop:buildnumber)s/_site/^g" `find _site -regex '.*\.\(html\|css\)'`"""),
                 name="relative urls"),
    SaveDirectory('_site', index='index.html')
]

builders = [
    BuilderConfig(
        name="test-default",
        slavenames=["chaotica", "lavos", "ganondorf"],
        factory=BuildFactory(test_default_steps)
    ),
    BuilderConfig(
        name="test-full",
        slavenames=["chaotica", "lavos", "ganondorf"],
        factory=BuildFactory(test_default_steps)
    ),
    BuilderConfig(
        name="package-osx",
        slavenames=["gantz"], # TODO: just testing on gantz. should be the-shadow
        factory=BuildFactory(package_osx_steps)
    ),
    BuilderConfig(
        name="build-www",
        slavenames=["newton"],
        factory=BuildFactory(build_www_steps)
    )
]

authz_cfg = authz.Authz(
    auth=auth.BasicAuth([(config.auth_user, config.auth_password)]),
    gracefulShutdown = 'auth',
    forceBuild = 'auth',
    forceAllBuilds = False,
    pingBuilder = False,
    stopBuild = 'auth',
    stopAllBuilds = 'auth',
    cancelPendingBuild = 'auth'
)

status = [
    html.WebStatus(http_port=8010, authz=authz_cfg),
    words.IRC(
        host=config.irc_server,
        nick=config.irc_nickname,
        channels=[config.irc_channel],
        password=config.irc_password,
        allowForce=True,
        useColors=True,
        notify_events = {
            'exception': 1,
            #'successToFailure': 1,
            #'failureToSuccess': 1,
            'started': 1,
            'finished': 1,
            'success': 1,
            'failure': 1
        }
    ),
    MailNotifier(
        fromaddr="devops@rethinkdb.com",
        sendToInterestedUsers=False,
        mode='all',
        extraRecipients=["atnnn@rethinkdb.com"]
    ),
    MailNotifier(
        fromaddr="buildbot@rethinkdb.com",
        buildSetSummary=True,
        sendToInterestedUsers=False,
        mode=['change'],
        extraRecipients=["atnnn@rethinkdb.com"]
    )
]

BuildmasterConfig = {
    'slaves': slaves,
    'protocols': protocols,
    'change_source': change_source,
    'schedulers': schedulers,
    'builders': builders,
    'status': status,
    'codebaseGenerator': lambda change: change['project'],

    'title': "RethinkDB",
    'titleURL': "http://rethinkdb.com/",
    'buildbotURL': "http://dr-doom:8010/",
    'db': { 'db_url' : "sqlite:///state.sqlite" }
}
